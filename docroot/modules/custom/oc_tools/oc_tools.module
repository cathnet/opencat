<?php

/**
 * @file
 * Contains oc_tools.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function oc_tools_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the oc_tools module.
    case 'help.page.oc_tools':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Tools for Opencourse development') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function oc_tools_theme() {
  return [
    'oc_tools' => [
      'render element' => 'children',
    ],
  ];
}


* @param \Drupal\Core\Entity\Entity $source
* @param \Drupal\Core\Entity\Entity $destination
* @param string $mode
*  Can be 'keep', 'overwrite' and 'clone'.
 * @param array $skip_fields
  *  An array of fields not to be cloned into the destination entity.
 */
public function oc_cloneFields(Entity $source, Entity &$destination, $mode, $skip_fields = []) {
  foreach ($source->getFields() as $name => $field) {

    // In this case clone only fields and leave out properties like title.
    if (strpos($name, 'field') === 0

      // Leave out certain fields.
      && !in_array($name, $skip_fields)) {

      switch ($mode) {

        // Import only those fields from source that are empty in destination.
        case 'keep':
        default:
          if (!$destination->get($name)->isEmpty()) {
            continue 2;
          }
          break;

        // Import field data from source overwriting all destination fields.
        // Do not empty fields in destination if they are empty in source.
        case 'overwrite':
          if ($source->get($name)->isEmpty()) {
            continue 2;
          }
          break;

        // Import field data from source overwriting all destination fields.
        // Empty fields in destination if they are empty in source.
        case 'clone':
          break;
      }
      $destination->set($name, $field->getValue());
    }
  }
  $destination->save();
}

public function oc_media_field_content_move {


  $query = \Drupal::entityQuery('media')
    ->condition('bundle', 'video_embed');
  $vids = $query->execute();
//$nodes = $node_storage->loadMultiple($nids);
//  $variables['oc_vids'] = $vids;
  foreach ($vids as $vid) {
    $oldmedia = \Drupal::entityTypeManager()->getStorage('media')->load($vid);
    $media = \Drupal\media\entity\Media::create([
      'bundle'           => 'remote_video',
      'uid'              => \Drupal::currentUser()->id(),
      'field_media_in_library' => TRUE,
      'field_oc_provider' => $vid,
      'field_media_oembed_video' => $oldmedia->get('field_media_video_embed_field')->getValue(),
    ]);
    $media->setName($oldmedia->get('name')->getValue())->setPublished(TRUE)->save();
    //$ocnew_value = \Drupal::entityTypeManager()->getStorage('media')->load($vid)->get('field_media_video_embed_field')->getValue();

//    \Drupal::entityTypeManager()->getStorage('media')->load($vid)->set('field_media_oembed_video', $ocnew_value);
  }

 // $variables['ocvid'] = \Drupal::entityTypeManager()->getStorage('media')->load(2239);

}
